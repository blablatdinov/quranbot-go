// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	core "github.com/blablatdinov/quranbot-go/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockBot is a mock of Bot interface.
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
}

// MockBotMockRecorder is the mock recorder for MockBot.
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance.
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// ActivateSubscriber mocks base method.
func (m *MockBot) ActivateSubscriber(chatId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSubscriber", chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateSubscriber indicates an expected call of ActivateSubscriber.
func (mr *MockBotMockRecorder) ActivateSubscriber(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSubscriber", reflect.TypeOf((*MockBot)(nil).ActivateSubscriber), chatId)
}

// CreateSubscriber mocks base method.
func (m *MockBot) CreateSubscriber(ChatId int64, referralCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriber", ChatId, referralCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscriber indicates an expected call of CreateSubscriber.
func (mr *MockBotMockRecorder) CreateSubscriber(ChatId, referralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriber", reflect.TypeOf((*MockBot)(nil).CreateSubscriber), ChatId, referralCode)
}

// GetSubscriberByChatId mocks base method.
func (m *MockBot) GetSubscriberByChatId(ChatId int64) (core.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriberByChatId", ChatId)
	ret0, _ := ret[0].(core.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriberByChatId indicates an expected call of GetSubscriberByChatId.
func (mr *MockBotMockRecorder) GetSubscriberByChatId(ChatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriberByChatId", reflect.TypeOf((*MockBot)(nil).GetSubscriberByChatId), ChatId)
}
